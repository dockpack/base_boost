---
# yamllint disable rule:line-length
- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: always

- name: Install dependencies
  yum:
    state: present
    name:
      - make
      - diffutils

- name: Set llvm_toolset to llvm-toolset-7.0
  when:
    - toolset == 'clang'
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int == 7
  set_fact:
    llvm_toolset: 'llvm-toolset-7.0'

- name: Set llvm_toolset to llvm-toolset
  when:
    - toolset == 'clang'
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int > 7
  set_fact:
    llvm_toolset: 'llvm-toolset'

- name: Display toolset
  debug:
    msg: "toolset (gcc or clang): {{ toolset }}"

- name: Ensure directory exists
  file:
    path: /root
    state: directory
    owner: root
    group: root
    mode: 0700
  tags:
    - base_boost

- name: Copy goss tests template
  template:
    src: test_boost.yml.j2
    dest: /root/test_boost.yml
    mode: 0644
  tags:
    - base_boost

- name: Disable software collections on RedHat 8
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int > 7
  set_fact:
    collections_enabled: false

- name: Display collections_enabled
  debug:
    msg: "collections_enabled: {{ collections_enabled }}"

- name: When not sourcing devtoolset enable file
  set_fact:
    cmd_env: "/bin/true && "

- name: Source devtoolset enable file
  when:
    - collections_enabled|bool
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int < 8
    - toolset == 'gcc'
  set_fact:
    cmd_env: "source /opt/rh/{{ cplusplus_devtoolset }}/enable && "

- name: Source llvm toolset enable file
  when:
    - collections_enabled
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int < 8
    - toolset == 'clang'
  set_fact:
    cmd_env: "source /opt/rh/{{ llvm_toolset }}/enable && "

- name: What is my gcc compiler?
  when: toolset == 'gcc'
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('/bin/true') }} gcc -v"
  register: gcc_version
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Display details about gcc version
  when: toolset == 'gcc'
  debug:
    msg: "{{ gcc_version.stdout_lines }}"

- name: What is my clang compiler?
  when: toolset == 'clang'
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('/bin/true') }} clang --version"
  register: clang_version
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Display details about clang version
  when: toolset == 'clang'
  debug:
    msg: "{{ clang_version.stdout_lines }}"

- name: Display zlib_url
  debug:
    msg: "zlib_url: {{ zlib_url }}"

- name: Unarchive zlib source
  unarchive:
    src: "{{ zlib_url }}"
    dest: "{{ boost_workdir }}"
    creates: "{{ boost_workdir }}/zlib-{{ zlib_version }}"
    copy: false
    mode: 0755
  register: download_zlib
  until: download_zlib is succeeded
  retries: 10
  delay: 2
  tags:
    - base_boost
    - boost

- name: Install zlib
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: |
    {{ cmd_env | default('/bin/true') }} \
    CC={{ toolset }} \
    CFLAGS='{{ boost_cflags }}' \
    ./configure --static \
    && make \
    && make install PREFIX={{ boost_prefix }}
  args:
    chdir: "{{ boost_workdir }}/zlib-{{ zlib_version }}"
    creates: "{{ boost_prefix }}/lib/libz.a"
  register: zlib_result
  tags:
    - base_boost

- name: Display details about the zlib installation
  when: zlib_result is defined
  debug:
    msg: "{{ zlib_result.stdout_lines }}"

- name: Display bzib2_url
  debug:
    msg: "bzip2_url: {{ bzip2_url }}"

- name: Download bzip2 source
  get_url:
    url: "{{ bzip2_url }}"
    dest: "/tmp/"
    mode: 0755
    validate_certs: false
  register: download_bzip2
  until: download_bzip2 is succeeded
  retries: 4
  delay: 5
  tags:
    - base_boost

- name: Unpack bzip2 source
  unarchive:
    src: "{{ download_bzip2.dest }}"
    dest: "{{ boost_workdir }}"
    creates: "{{ boost_workdir }}/bzip2-{{ bzip2_version }}"
    copy: false
    mode: 0755
  tags:
    - base_boost

- name: Make install bzip2
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('') }} make CC={{ toolset }} CFLAGS='{{ boost_cflags }}' && make install"
  args:
    chdir: "{{ boost_workdir }}/bzip2-{{ bzip2_version }}"
    creates: "{{ boost_prefix }}/lib/libbz2.a"
  register: bzip2_result
  tags:
    - base_boost

- name: Display details about the bzip2 installation
  when: bzip2_result is defined
  debug:
    msg: "{{ bzip2_result.stdout_lines }}"

- name: Get details for Boost libraries
  uri:
    url: "{{ boost_url }}.json"
    return_content: true
  register: boost
  until: boost is success
  retries: 3
  delay: 5
  tags:
    - base_boost
    - boost

- name: Set facts for download
  set_fact:
    boost_json: "{{ boost.content }}"
  when: boost.status == 200
  tags:
    - base_boost
    - boost

- name: Yum install Boost libraries
  when: ansible_os_family == 'RedHat' and boost.status != 200
  yum:
    name: boost-devel
    state: "{{ compilers_present }}"
  register: network_access
  until: network_access is success
  retries: 10
  delay: 2
  tags:
    - base_boost
    - boost

- name: Get sha256 for validation
  set_fact:
    sha256sum: "{{ boost_json.sha256 }}"
  when: boost.status == 200
  tags:
    - base_boost
    - boost

- name: Set filename
  set_fact:
    boost_file: "{{ boost_json.file }}"
  when: boost.status == 200
  tags:
    - base_boost
    - boost

- name: Download Boost sources
  when: boost.status == 200
  get_url:
    url: "{{ boost_url }}"
    dest: "/tmp/{{ boost_file }}"
    checksum: "sha256:{{ sha256sum }}"
    mode: 0755
  register: download_boost
  until: download_boost is succeeded
  retries: 10
  delay: 2
  tags:
    - base_boost
    - boost

- name: Unpack Boost sources
  when: boost.status == 200
  unarchive:
    src: "/tmp/{{ boost_file }}"
    dest: "{{ boost_workdir }}"
    creates: "{{ boost_workdir }}/{{ boost_dest }}"
    copy: false
    mode: 0755
  tags:
    - base_boost
    - boost

- name: Bootstrap Boost libraries
  when: boost.status == 200
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('') }} ./bootstrap.sh --with-toolset={{ toolset }} --without-libraries=python --without-icu --prefix={{ boost_prefix }}"
  args:
    chdir: "{{ boost_workdir }}/{{ boost_dest }}"
    creates: "{{ boost_workdir }}/{{ boost_dest }}/project-config.jam"
  register: boost_bootstrap
  tags:
    - base_boost
    - boost
    - skip_ansible_lint

- name: Display details about the boost bootstrap
  when: boost_bootstrap is defined and boost_bootstrap and boost.status == 200
  debug:
    msg: "{{ boost_bootstrap.stdout_lines }}"

- name: Clean Boost libraries
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('') }} ./b2 --clean"
  args:
    chdir: "{{ boost_workdir }}/{{ boost_dest }}"
  when: clean_boost is defined and clean_boost and boost.status == 200
  register: boost_configuration
  tags:
    - base_boost
    - boost
    - skip_ansible_lint

- name: Display details about the boost configuration
  when: clean_boost is defined and clean_boost and boost.status == 200
  debug:
    msg: "{{ boost_configuration.stdout_lines }}"

- name: Compile Boost libraries
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('') }} ./b2 -j{{ ansible_processor_vcpus }} \
     toolset=gcc
     {{ boost_properties }} variant={{ boost_variant }} cflags='{{ boost_cflags }}' cxxflags='{{ boost_cxxflags }}' \
     -sZLIB_SOURCE={{ boost_workdir }}/zlib-{{ zlib_version }} \
     -sBZIP2_SOURCE={{ boost_workdir }}/bzip2-{{ bzip2_version }} \
     {{ compile_boost_with }}"
  args:
    chdir: "{{ boost_workdir }}/{{ boost_dest }}"
    creates: "{{ boost_workdir }}/{{ boost_dest }}/stage/lib/libboost_bzip2.a"
  when:
    - compile_boost is defined
    - compile_boost|bool
    - toolset == 'gcc'
    - boost.status == 200
  tags:
    - base_boost
    - boost
    - skip_ansible_lint

- name: Compile Boost libraries
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('') }} ./b2 -j{{ ansible_processor_vcpus }} \
     toolset=clang
     {{ boost_properties }} variant={{ boost_variant }} cflags='{{ boost_cflags }}' cxxflags='{{ boost_cxxflags }}' \
     -sZLIB_SOURCE={{ boost_workdir }}/zlib-{{ zlib_version }} \
     -sBZIP2_SOURCE={{ boost_workdir }}/bzip2-{{ bzip2_version }} \
     {{ compile_boost_with }}"
  args:
    chdir: "{{ boost_workdir }}/{{ boost_dest }}"
    creates: "{{ boost_workdir }}/{{ boost_dest }}/stage/lib/libboost_bzip2.a"
  when:
    - compile_boost is defined
    - compile_boost|bool
    - toolset == 'clang'
    - boost.status == 200
  tags:
    - base_boost
    - boost
    - skip_ansible_lint

- name: Install Boost libraries
  environment:
    PATH: '/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/bin:/usr/bin'
  shell: "{{ cmd_env | default('') }} ./b2 -j{{ ansible_processor_vcpus }} \
     {{ boost_properties }} \
     variant={{ boost_variant }} \
     cflags='{{ boost_cflags }}' \
     cxxflags='{{ boost_cxxflags }}' \
     -sZLIB_SOURCE={{ boost_workdir }}/zlib-{{ zlib_version }} \
     -sBZIP2_SOURCE={{ boost_workdir }}/bzip2-{{ bzip2_version }} \
     {{ compile_boost_with }} \
     install"
  args:
    chdir: "{{ boost_workdir }}/{{ boost_dest }}"
    creates: "{{ boost_prefix }}/lib/libboost_bzip2.a"
  when: compile_boost is defined and compile_boost and boost.status == 200
  tags:
    - base_boost
    - boost
    - skip_ansible_lint

- name: Cleanup of build artefacts
  file:
    path: "{{ boost_workdir }}/{{ boost_dest }}"
    state: absent
  tags:
    - notest
...
